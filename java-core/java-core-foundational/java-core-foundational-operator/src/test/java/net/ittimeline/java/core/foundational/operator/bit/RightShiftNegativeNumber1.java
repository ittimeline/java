package net.ittimeline.java.core.foundational.operator.bit;

/**
 * 右移运算符操作负整数之-8 >> 1
 *
 * @author tony 18601767221@163.com
 * @version 2024/10/16 20:49
 * @since Java21
 */
public class RightShiftNegativeNumber1 {
    public static void main(String[] args) {
        /*
            1.先求-8的补码（ 计算机中的数据是使用补码进行运算的，正数的原码、反码、补码都一样，负数的补码等于原码取反加1）
                ①求8的原码
                8的原码：0000 0000 0000 0000 0000 0000 0000 1000

                ②求-8的原码（原码的最高位（左边的第一位）是符号位：0表示正数，1表示负数）
               -8的原码：1000 0000 0000 0000 0000 0000 0000 1000

                ③求-8的反码（原码求反码：最高位不变，其他位取反）
               -8的反码：1111 1111 1111 1111 1111 1111 1111 0111

                ④求-8的补码（补码=反码+1）
               -8的补码：1111 1111 1111 1111 1111 1111 1111 1000

            2.计算-8 >> 1（右移运算符的运算规则是用于将数据的二进制位向右移动，左边填充符号位，符号位是0填充0，符号位是1就填充1。
            右移n位在一定范围内就是除以2的n次方。）
                1111 1111 1111 1111 1111 1111 1111 1000
                >> 1
                =
                11111 1111 1111 1111 1111 1111 1111 100

            3.将补码换算成原码（ 查看运算结果看原码）
            原码等于补码减1取反
                ①根据补码求反码：反码=补码-1
                11111 1111 1111 1111 1111 1111 1111 100-1=11111 1111 1111 1111 1111 1111 1111 011

                ②根据反码求原码：最高位不变，其他位取反
                反码：11111 1111 1111 1111 1111 1111 1111 011
                原码：10000 0000 0000 0000 0000 0000 0000 100

            4.将原码转换为十进制（ 打印输出结果是十进制）
                10000 0000 0000 0000 0000 0000 0000 100转换为十进制结果是-4

            5.程序运行结果
                -8 >> 1 结果就-4
         */
        System.out.println("-8 >> 1 = " + (-8 >> 1));
    }
}
