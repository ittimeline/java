package net.ittimeline.java.core.foundational.operator.bit;

/**
 * 左移运算符操作正整数之8 << 2
 *
 * @author tony 18601767221@163.com
 * @version 2024/10/16 20:28
 * @since Java21
 */
public class LeftShiftPositiveNumber2 {
    public static void main(String[] args) {
        /*
            1.先计算8的补码（ 计算机中的数据是使用补码进行运算的，正数的原码、反码、补码都一样）
                8的补码：0000 0000 0000 0000 0000 0000 0000 1000

            2.计算8 << 2（左移运算符的运算规则是用于将数据的二进制位向左移动，右边填充0。左移n位在一定范围内就是乘以2的n次方）
                0000 0000 0000 0000 0000 0000 0000 1000
                << 2
                =
                00 0000 0000 0000 0000 0000 0000 100000

            3.将补码换算成原码（查看运算结果看原码）
                正数的原码、反码、补码都一样
                补码：00 0000 0000 0000 0000 0000 0000 100000
                原码：00 0000 0000 0000 0000 0000 0000 100000

            4.将原码转换为十进制（打印输出结果是十进制）
                 00 0000 0000 0000 0000 0000 0000 100000转换为十进制结果是32

            5.程序运行结果
                8 << 2 终结果就是32
         */
        System.out.println("8 << 2 = " + (8 << 2));
    }
}
