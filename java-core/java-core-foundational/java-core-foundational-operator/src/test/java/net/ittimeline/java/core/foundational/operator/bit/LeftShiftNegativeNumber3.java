package net.ittimeline.java.core.foundational.operator.bit;

/**
 * 左移运算符操作负整数之-8 << 28
 *
 * @author tony 18601767221@163.com
 * @version 2024/10/16 20:42
 * @since Java21
 */
public class LeftShiftNegativeNumber3 {
    public static void main(String[] args) {
         /*
            1.先求-8的补码（计算机中的数据是使用补码进行运算的，正数的原码、反码、补码都一样，负数的补码等于原码取反加1）
                ①求8的原码
                8的原码：0000 0000 0000 0000 0000 0000 0000 1000

                ②求-8的原码（原码的最高位（左边的第一位）是符号位：0表示正数，1表示负数）
               -8的原码：1000 0000 0000 0000 0000 0000 0000 1000

                ③求-8的反码（原码求反码：最高位不变，其他位取反）
               -8的反码：1111 1111 1111 1111 1111 1111 1111 0111

                ④求-8的补码（补码=反码+1）
               -8的补码：1111 1111 1111 1111 1111 1111 1111 1000

            2.计算-8 << 28（左移运算符的运算规则是用于将数据的二进制位向左移动，右边填充0。左移n位在一定范围内就是乘以2的n次方）
                1111 1111 1111 1111 1111 1111 1111 1000
                << 28
                =
                1000 0000 0000 0000 0000 0000 0000 0000
                1000 0000 0000 0000 0000 0000 0000 0000是-2147483648的补码，并且没有原码和反码

            3. 程序运行结果
                -8 << 28 结果就是-2147483648
         */
        System.out.println("-8 << 28 = " + (-8 << 28));
    }
}
