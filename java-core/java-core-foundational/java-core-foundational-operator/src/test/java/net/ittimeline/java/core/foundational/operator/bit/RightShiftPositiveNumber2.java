package net.ittimeline.java.core.foundational.operator.bit;

/**
 * 右移运算符操作正整数之8 >> 2
 *
 * @author tony 18601767221@163.com
 * @version 2024/10/16 20:45
 * @since Java21
 */
public class RightShiftPositiveNumber2 {
    public static void main(String[] args) {
        /*
            1.先计算8的补码（计算机中的数据是使用补码进行运算的，正数的原码、反码、补码都一样）
             8的补码：0000 0000 0000 0000 0000 0000 0000 1000

            2.计算8 >> 2（右移运算符的运算规则是用于将数据的二进制位向右移动，左边填充符号位，符号位是0填充0，符号位是1就填充1。
            右移n位在一定范围内就是除以2的n次方。）
                0000 0000 0000 0000 0000 0000 0000 1000
                >> 2
                =
                000000 0000 0000 0000 0000 0000 0000 10

            3.将补码换算成原码（查看运算结果看原码）
            正数的原码、反码、补码都一样
            补码：000000 0000 0000 0000 0000 0000 0000 10
            原码：000000 0000 0000 0000 0000 0000 0000 10

            4.将原码转换为十进制（打印输出结果是十进制）
                000000 0000 0000 0000 0000 0000 0000 10转换为十进制结果是2

            5. 程序运行结果
                8 >> 2 结果就是2
         */
        System.out.println("8 >> 2 = " + (8 >> 2));
    }
}
