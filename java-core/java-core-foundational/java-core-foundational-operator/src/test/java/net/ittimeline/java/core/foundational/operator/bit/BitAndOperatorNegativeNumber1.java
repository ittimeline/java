package net.ittimeline.java.core.foundational.operator.bit;

/**
 * 按位与运算符操作负整数之 -5 & -3
 *
 * @author tony 18601767221@163.com
 * @version 2024/10/16 19:59
 * @since Java21
 */
public class BitAndOperatorNegativeNumber1 {
    public static void main(String[] args) {
        /*
            1.先计算-5和-3的补码（计算机中的数据是使用补码进行运算的，负数的补码等于原码取反加1）
                ①求5和3的原码
                5的原码：0000 0000 0000 0000 0000 0000 0000 0101
                3的原码：0000 0000 0000 0000 0000 0000 0000 0011

                ②求-5和-3的原码（原码的最高位（左边的第一位）是符号位：0表示正数，1表示负数）
                -5的原码：1000 0000 0000 0000 0000 0000 0000 0101
                -3的原码：1000 0000 0000 0000 0000 0000 0000 0011

                ③求-5和-3的反码（原码求反码：最高位不变，其他位取反）
                -5的反码：1111 1111 1111 1111 1111 1111 1111 1010
                -3的反码：1111 1111 1111 1111 1111 1111 1111 1100

                ④求-5和-3的补码（补码=反码+1）
                -5的补码：1111 1111 1111 1111 1111 1111 1111 1011
                -3的补码：1111 1111 1111 1111 1111 1111 1111 1101

            2.计算-5 & -3（按位与计算规则是按照二进制位进行与运算：同1为1，有0为0）
                1111 1111 1111 1111 1111 1111 1111 1011
                &
                1111 1111 1111 1111 1111 1111 1111 1101
                =
                1111 1111 1111 1111 1111 1111 1111 1001

            3.将补码换算成原码（查看运算结果看原码）
                ①根据补码求反码：补码-1=反码
                1111 1111 1111 1111 1111 1111 1111 1001
                -                                     1
                =
                1111 1111 1111 1111 1111 1111 1111 1000

                ②根据反码求原码：最高位不变，其他位取反
                反码：1111 1111 1111 1111 1111 1111 1111 1000
                原码：1000 0000 0000 0000 0000 0000 0000 0111

            4.将原码转换为十进制（ 打印输出结果是十进制）
                1000 0000 0000 0000 0000 0000 0000 0111转换为十进制结果是-7

            5. 程序运行结果
                -5 & -3的运算结果就是-7
         */
        System.out.println("-5 & -3 = " + (-5 & -3));
    }
}
