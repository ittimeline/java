package net.ittimeline.java.core.foundational.operator.bit;

/**
 * 按位与运算符操作正整数之5 & 3
 *
 * @author tony 18601767221@163.com
 * @version 2024/10/16 19:57
 * @since Java21
 */
public class BitAndOperatorPositiveNumber2 {
    public static void main(String[] args) {
        /*
            1.先计算5和3的补码（计算机中的数据是使用补码进行运算的，正数的原码、反码、补码都一样）
                5的补码：0000 0000 0000 0000 0000 0000 0000 0101
                3的补码：0000 0000 0000 0000 0000 0000 0000 0011

            2.计算5 & 3（按位与计算规则是按照二进制位进行与运算：同1为1，有0为0）
                0000 0000 0000 0000 0000 0000 0000 0101
                &
                0000 0000 0000 0000 0000 0000 0000 0011
                =
                0000 0000 0000 0000 0000 0000 0000 0001

            3.将补码换算成原码（查看运算结果看原码）
                正数的原码、反码、补码都一样
                补码：0000 0000 0000 0000 0000 0000 0000 0001
                原码：0000 0000 0000 0000 0000 0000 0000 0001

            4.将原码转换为十进制（打印输出结果是十进制）
                0000 0000 0000 0000 0000 0000 0000 0001转换为十进制结果是1

            5. 程序运行结果
                5 & 3的运算结果结果就是1
         */
        System.out.println("5 & 3 = " + (5 & 3));
    }
}
