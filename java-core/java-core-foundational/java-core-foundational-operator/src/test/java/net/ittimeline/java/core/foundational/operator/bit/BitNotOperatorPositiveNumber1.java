package net.ittimeline.java.core.foundational.operator.bit;

/**
 * 按位取反运算符操作正整数之~5
 *
 * @author tony 18601767221@163.com
 * @version 2024/10/16 20:20
 * @since Java21
 */
public class BitNotOperatorPositiveNumber1 {
    public static void main(String[] args) {
        /*
            1.先计算5的补码（计算机中的数据是使用补码进行运算的，正数的原码、反码、补码都一样）
                5的补码：0000 0000 0000 0000 0000 0000 0000 0101

            2.计算~5（按位与计算规则是按照二进制位取反：1为0，0为1）
                0000 0000 0000 0000 0000 0000 0000 0101
                ~
                =
                1111 1111 1111 1111 1111 1111 1111 1010

            3.将补码换算成原码（查看运算结果看原码）
                负数的原码是补码减1取反
                ①根据补码求反码：反码=补码减1
                1111 1111 1111 1111 1111 1111 1111 1010-1=1111 1111 1111 1111 1111 1111 1111 1001

                ②根据反码求原码：最高位不变，其他位取反
                反码1111 1111 1111 1111 1111 1111 1111 1001转换为原码是1000 0000 0000 0000 0000 0000 0000 0110

            4.将原码转换为十进制（打印输出结果是十进制）
                1000 0000 0000 0000 0000 0000 0000 0110转换为十进制结果是-6

            5. 程序运行结果
                ~5 结果就是-6
         */
        System.out.println("~5 = " + (~5));
    }
}
